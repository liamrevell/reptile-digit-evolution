ylim=c(0,quantile(count,MAX)),
ylab=paste("daily downloads (",pkg,")",sep=""),
bty="n",las=1,cex.axis=0.8,axes=FALSE)
axis(1,at=seq(as.Date("2010-01-01"),as.Date("2024-01-01"),length.out=15),
labels=seq(2010,2024,by=1),cex.axis=0.8)
axis(2,cex.axis=0.8,las=2)
clip(0,1e12,0,quantile(count,MAX))
lines(lowess(date,count,f=0.05),col="red",lwd=2)
title(main=paste("Daily downloads of ",pkg," (2010-present)",
sep=""),font.main=3)
detach(obj)
invisible(obj)
}
daily.downloads("phytools")
daily.downloads("ape")
daily.downloads("diversitree")
daily.downloads("learnPopGen")
daily.downloads("corHMM")
daily.downloads("picante")
daily.downloads("phangorn")
getwd()
setwd("blogging/")
png(file="daily-downloads.png",width=9,height=6,units="in",dpi=300)
daily.downloads("phytools")
dev.off()
png(file="daily-downloads.png",width=9,height=6,units="in",res=300)
daily.downloads("phytools")
dev.off()
png(file="daily-downloads.png",width=9,h
eight=6,units="in",res=300)
par(fg="white",bg="black")
png(file="daily-downloads.png",width=9,height=6,units="in",res=300)
par(fg="white",bg="black")
daily.downloads("phytools")
dev.off()
par
par()
png(file="daily-downloads.png",width=9,height=6,units="in",res=300)
par(fg="white",bg="black",col.lab="white",col.main="white",col.axis="white")
daily.downloads("phytools")
dev.off()
daily.downloads<-function(pkg,from="2011-01-01",to="2023-04-15"){
MAX<-0.999
obj<-cran_downloads(pkg,from=from,to=to)
attach(obj)
plot(count~date,type="l",col="grey",
ylim=c(0,quantile(count,MAX)),
ylab=paste("daily downloads (",pkg,")",sep=""),
bty="n",las=1,cex.axis=0.8,axes=FALSE)
axis(1,at=seq(as.Date("2010-01-01"),as.Date("2024-01-01"),length.out=15),
labels=seq(2010,2024,by=1),cex.axis=0.8)
axis(2,cex.axis=0.8,las=2)
clip(0,1e12,0,quantile(count,MAX))
lines(lowess(date,count,f=0.05),col="red",lwd=2)
title(main=paste("Daily downloads of ",pkg," (2010-present)",
sep=""),font.main=3)
detach(obj)
invisible(obj)
}
png(file="daily-downloads.png",width=9,height=6,units="in",res=300)
par(fg="white",bg="black",col.lab="white",col.main="white",col.axis="white")
daily.downloads("phytools")
dev.off()
daily.downloads<-function(pkg,from="2011-01-01",to="2023-04-15"){
MAX<-0.999
obj<-cran_downloads(pkg,from=from,to=to)
attach(obj)
plot(count~date,type="l",col="grey",
ylim=c(0,quantile(count,MAX)),
ylab=paste("daily downloads (",pkg,")",sep=""),
bty="n",las=1,cex.axis=0.8,axes=FALSE)
axis(1,at=seq(as.Date("2010-01-01"),as.Date("2024-01-01"),length.out=15),
labels=seq(2010,2024,by=1),cex.axis=0.8)
axis(2,cex.axis=0.8,las=2)
clip(0,1e12,0,quantile(count,MAX))
lines(lowess(date,count,f=0.05),col=palette()[4],lwd=4)
title(main=paste("Daily downloads of ",pkg," (2010-present)",
sep=""),font.main=3)
detach(obj)
invisible(obj)
}
png(file="daily-downloads.png",width=9,height=6,units="in",res=300)
par(fg="white",bg="black",col.lab="white",col.main="white",col.axis="white")
daily.downloads("phytools")
dev.off()
seq(as.Date("2012-01-01"),as.Date("2024-01-01"),length.out=1)
seq(as.Date("2012-01-01"),as.Date("2024-01-01"),length.out=14)
seq(as.Date("2012-01-01"),as.Date("2024-01-01"),length.out=13)
daily.downloads<-function(pkg,from="2012-01-01",to="2023-04-15"){
MAX<-0.999
obj<-cran_downloads(pkg,from=from,to=to)
attach(obj)
plot(count~date,type="l",col="grey",
ylim=c(0,quantile(count,MAX)),
ylab=paste("daily downloads (",pkg,")",sep=""),
bty="n",las=1,cex.axis=0.8,axes=FALSE)
axis(1,at=seq(as.Date("2012-01-01"),as.Date("2024-01-01"),length.out=13),
labels=seq(2012,2024,by=1),cex.axis=0.8)
axis(2,cex.axis=0.8,las=2)
clip(0,1e12,0,quantile(count,MAX))
lines(lowess(date,count,f=0.05),col=palette()[4],lwd=4)
title(main=paste("Daily downloads of ",pkg," (2012-present)",
sep=""),font.main=3)
detach(obj)
invisible(obj)
}
par(fg="white",bg="black",col.lab="white",col.main="white",col.axis="white")
daily.downloads("phytools")
daily.downloads<-function(pkg,from="2012-01-01",to="2023-04-15"){
MAX<-0.999
obj<-cran_downloads(pkg,from=from,to=to)
attach(obj)
plot(count~date,type="l",col="grey",
ylim=c(0,quantile(count,MAX)),
ylab=paste("daily downloads (",pkg,")",sep=""),
bty="n",las=1,cex.axis=0.8,axes=FALSE)
axis(1,at=seq(as.Date("2011-01-01"),as.Date("2024-01-01"),length.out=14),
labels=seq(2011,2024,by=1),cex.axis=0.8)
axis(2,cex.axis=0.8,las=2)
clip(0,1e12,0,quantile(count,MAX))
lines(lowess(date,count,f=0.05),col=palette()[4],lwd=4)
title(main=paste("Daily downloads of ",pkg," (2012-present)",
sep=""),font.main=3)
detach(obj)
invisible(obj)
}
par(fg="white",bg="black",col.lab="white",col.main="white",col.axis="white")
daily.downloads("phytools")
png(file="daily-downloads.png",width=9,height=6,units="in",res=300)
par(fg="white",bg="black",col.lab="white",col.main="white",col.axis="white")
daily.downloads("phytools")
dev.off()
png(file="daily-downloads.png",width=8,height=4.5,units="in",res=300)
par(fg="white",bg="black",col.lab="white",col.main="white",col.axis="white")
daily.downloads("phytools")
dev.off()
phytools:::makeMappedEdge()
phytools:::makeMappedEdge
library(phytools)
packageVersion("phytools")
data(primate.tree)
data(primate.data)
head(primate.data)
lnSkull<-setNames(primate.data$Skull_length,rownames(primate.data))
lnSkull<-log(lnSkull)
?fastAnc
anc_skull<-fastAnc(primate.tree,lnSkull)
anc_skull
plotTree(primate.tree,ftype="i",fsize=0.6,lwd=1)
nodelabels(cex=0.7)
exp(anc_skull)
anc_skull<-fastAnc(primate.tree,lnSkull,CI=TRUE)
print(anc_skull,printlen=10)
cMap_skull<-contMap(primate.tree,anc_skull,plot=FALSE)
cMap_skull<-contMap(primate.tree,lnSkull,plot=FALSE)
cMap_skull
plot(cMap_skull,fsize=c(0.5,0.8))
cMap_skull<-setMap(cMap_skull,c("white","black"))
plot(cMap_skull,fsize=c(0.5,0.8),lwd=c(3,5))
viridisLite::viridis(n=10)
cMap_skull<-setMap(cMap_skull,viridisLite::viridis(n=10))
plot(cMap_skull,fsize=c(0.5,0.8),lwd=c(3,5),outline=FALSE)
dev.off()
phenogram(primate.tree,lnSkull,fsize=0.6)
?phenogram
phenogram(primate.tree,lnSkull,fsize=0.6,spread.cost=c(0,1))
phenogram(primate.tree,lnSkull,fsize=0.6,spread.cost=c(1,0))
phenogram(primate.tree,lnSkull,fsize=0.4,spread.cost=c(1,0))
c(lnSkull,fastAnc(primate.tree,lnSkull))
exp(c(lnSkull,fastAnc(primate.tree,lnSkull)))
phenogram(primate.tree,exp(c(lnSkull,fastAnc(primate.tree,lnSkull))),
fsize=0.4,spread.cost=c(1,0))
phenogram(primate.tree,exp(c(lnSkull,fastAnc(primate.tree,lnSkull))),
fsize=0.4,spread.cost=c(1,0),lwd=1)
a<-fastAnc(primate.tree,lnSkull)
nodelabels(cex=0.5)
phenogram(primate.tree,exp(c(lnSkull,a)),fsize=0.4,
spread.cost=c(1,0),lwd=1)
?anc.ML
?anc.Bayes
mcmc_skull<-anc.Bayes(primate.tree,lnSkull)
mcmc_skull<-anc.Bayes(primate.tree,lnSkull,ngen=1000000)
basr_skull<-summary(mcmc_skull)
bayes_cMap<-contMap(primate.tree,lnSkull,anc.states=basr_skull,
plot=fALSE)
bayes_cMap<-contMap(primate.tree,lnSkull,anc.states=basr_skull,
plot=FALSE)
bayes_cMap
bayes_cMap<-setMap(bayes_cMap,c("orange","red","black"))
plot(bayes_cMap,lwd=3,outline=FALSE,fsize=c(0.4,0.8),
leg.txt="log(skull length)")
bayes_cMap<-setMap(bayes_cMap,c("yellow","orange","red","black"))
plot(bayes_cMap,lwd=3,outline=FALSE,fsize=c(0.4,0.8),
leg.txt="log(skull length)")
library(phytools)
data(bonyfish.tree)
data(bonyfish.data)
head(bonyfish.data)
plotTree.datamatrix(bonyfish.tree,bonyfish.data)
?fitPagel
spawning_mode<-setNames(bonyfish.data$spawning_mode,
rownames(bonyfish.data))
paternal_care<-setNames(bonyfish.data$paternal_care,
rownames(bonyfish.data))
parentalCare.fit<-fitPagel(bonyfish.tree,
x=paternal_care,y=spawning_mode,opt.method="optimParallel")
parentalCare.fit
plot(parentalCare.fit)
plot(parentalCare.fit,lwd.by.rate=TRUE)
plot(parentalCare.fit)
parentalCare.depy<-fitPagel(bonyfish.tree,
x=paternal_care,y=spawning_mode,dep.var="y")
plot(parentalCare.depy)
anova(parentalCare.depy,parentalCare.fit)
liolaemid.tree<-read.nexus(file=
"http://www.phytools.org/Rbook/7/Liolaemidae.MCC.nex")
liolaemid.data<-read.csv(file=
"http://www.phytools.org/Rbook/7/Liolaemidae.data.csv",
row.names=1,stringsAsFactors = TRUE)
liolaemid.tree
head(liolaemid.data)
parity_mode<-setNames(liolaemid.data$parity_mode,
rownames(liolaemid.data))
head(parity_mode)
hrm_parity<-fitHRM(liolaemid.tree,parity_mode,niter=2,
ncat=2,opt.method="optimParallel",rand_start=TRUE,
pi="fitzjohn")
dev.off()
plot(hrm_parity)
hrm_anc<-ancr(hrm_parity)
hrm_anc
hide.hidden(hrm_anc)
packageVersion("phytools")
library(phytools)
?pscore
## load tree and data from Revell & Collar (2009)
data(sunfish.tree)
data(sunfish.data)
## extract discrete character (feeding mode)
fmode<-setNames(sunfish.data$feeding.mode,
rownames(sunfish.data))
## compute the parsimony score
pscore(sunfish.tree,fmode)
library(phytools)
tree<-pbtree(n=10)
splinePhylogram(tree)
splinePhylogram<-function(tree,...){
args<-list(...)
args$tree<-tree
args$plot<-FALSE
do.call(plotTree,args)
pp<-get("last.plot_phylo",envir=.PlotPhyloEnv)
if(hasArg(df)) df<-list(...)$df
else df<-50
if(hasArg(res)) res<-list(...)$res
else res<-4*df
if(hasArg(lwd)) lwd<-list(...)$lwd
else lwd<-par()$lwd
if(hasArg(color)) color<-list(...)$color
else color<-par()$fg
if(is.null(tree$edge.length)) tree<-compute.brlen(tree)
h<-max(nodeHeights(tree))/res
tree<-make.era.map(tree,seq(0,max(nodeHeights(tree)),by=h))
tree<-map.to.singleton(tree)
args<-list(...)
args$tree<-tree
args$color<-"transparent"
dev.hold()
do.call(plotTree,args)
obj<-get("last_plot.phylo",envir=.PlotPhyloEnv)
phy<-list(edge=obj$edge,Nnode=obj$Nnode,
tip.label=1:obj$Ntip)
attr(phy,"class")<-"phylo"
for(i in 1:Ntip(phy)){
aa<-c(i,Ancestors(phy,i))
xx<-obj$xx[aa]
yy<-obj$yy[aa]
DF<-min(min(length(xx)-1,df),df)
tmp<-predict(smooth.spline(xx,yy,df=DF))
tmp$x<-c(xx[length(xx)],tmp$x)
tmp$y<-c(yy[length(yy)],tmp$y)
lines(tmp,lwd=lwd,col=color)
}
nulo<-dev.flush()
args$tree<-collapse.singles(tree)
args$add<-TRUE
ffg<-par()$fg
par(fg="transparent")
do.call(plotTree,args)
par(fg=ffg)
obj$edge<-tree$edge
assign("last_plot.phylo",pp,envir=.PlotPhyloEnv)
}
splinePhylogram(tree)
library(phytools)
tree<-pbtree(n=10)
splinePhylogram(tree)
library(phytools)
tree<-pbtree(n=10)
splinePhylogram(tree)
library(phytools)
tree<-pbtree(n=10)
splinePhylogram(tree)
nodelabels()
edgelabels()
data(salamanders)
splinePhylogram(salamanders)
splinePhylogram(salamanders)
splinePhylogram(salamanders,lwd=3)
splinePhylogram(salamanders,lwd=3,direction="upwards")
splinePhylogram(salamanders,lwd=3,direction="leftwards")
?hide.hidden
library(phytools)
?hide.hidden
library(phytools)
grunt_tree<-read.tree(
file="http://www.phytools.org/Rbook/11/grunts.phy")
grunt_tree
grunt_data<-read.csv(
file="http://www.phytools.org/Rbook/11/grunts.csv",
row.names=1,stringsAsFactors=TRUE)
head(grunt_data)
habitat<-setNames(grunt_data$habitat,
rownames(grunt_data))
head(habitat)
plotTree(grunt_tree,fsize=0.8,ftype="i")
plotTree(grunt_tree,fsize=0.8,ftype="i",offset=1)
plotTree(grunt_tree,fsize=0.8,ftype="i",offset=0.8)
plotTree(grunt_tree,fsize=0.7,ftype="i",offset=0.8)
setdiff(grunt_tree$tip.label,names(habitat))
setdiff(names(habitat),grunt_tree$tip.label)
plotTree(grunt_tree,fsize=0.7,ftype="i",offset=0.5)
HABITAT<-to.matrix(habitat,0:1)
head(HABITAT)
nodelabels(pie=HABITAT[grunt_tree$tip.label,])
tiplabels(pie=HABITAT[grunt_tree$tip.label,])
plotTree(grunt_tree,fsize=0.7,ftype="i",offset=0.5)
HABITAT<-to.matrix(habitat,0:1)
head(HABITAT)
tiplabels(pie=HABITAT[grunt_tree$tip.label,])
plotTree(grunt_tree,fsize=0.7,ftype="i",offset=0.5)
tiplabels(pie=HABITAT[grunt_tree$tip.label,],cex=0.5)
plotTree(grunt_tree,fsize=0.7,ftype="i",offset=0.5)
HABITAT<-to.matrix(habitat,0:1)
head(HABITAT)
tiplabels(pie=HABITAT[grunt_tree$tip.label,],cex=0.4)
tiplabels(pie=HABITAT[grunt_tree$tip.label,],cex=0.4,
piecol=c("orange","purple"))
library(diversitree)
?make.bisse
bisse_model<-make.bisse(grunt_tree,habitat)
bisse_model
?find.mle
init<-starting.point.bisse(grunt_tree)
init
find.mle(bisse_model,init)
library(phytools)
data("betaCov.tree", package="phytools")
data("betaCoV.tree", package="phytools")
betaCoV.tree
library(phytools)
?plotTree.boxplot
tree<-pbtree(n=100)
library(phytools)
tree<-pbtree(n=100)
Q<-matrix(c(-1,1,1,-1),2,2,dimnames=list(0:1,0:1))
x<-sim.Mk(tree,Q)
x
X<-to.matrix(x,levels(x))
X
X_missing[sample(1:nrow(X),10),]<-c(0.5,0.5)
library(phytools)
tree<-pbtree(n=100)
Q<-matrix(c(-1,1,1,-1),2,2,dimnames=list(0:1,0:1))
x<-sim.Mk(tree,Q)
X<-to.matrix(x,levels(x))
X_missing<-X
X_missing[sample(1:nrow(X),10),]<-c(0.5,0.5)
X_missing
fit<-fitMk(tree,X)
fit_missing<-fitMk(tree,X_missing)
fit_missing
fit
library(phytools)
tree<-pbtree(n=100)
Q<-matrix(c(-1,1,1,-1),2,2,dimnames=list(0:1,0:1))
x<-sim.Mk(tree,Q)
X<-to.matrix(x,levels(x))
X_missing<-X
X_missing[ii<-sample(1:nrow(X),10),]<-c(0.5,0.5)
fit<-fitMk(tree,X)
fit
fit_missing<-fitMk(tree,X_missing)
fit_missing
X_missing[ii,]<-c(1,1)
X_missing[ii,]<-c(1,1)
fitMk(tree,X_missing)
fit2<-fitMk(tree,X_missing)
ancr(fit)
anc(fit_missing)
ancr(fit_missing)
ancr(fit_missing,tips=TRUE)
ancr(fit_missing,tips=TRUE)$ace
ancr(fit2,tips=TRUE)$ace
ancr(fit_missing,tips=TRUE)
ancr(fit2,tips=TRUE)
q<-vector()
q_missing<-vector()
for(i in 1:2){
tree<-pbtree(n=100)
Q<-matrix(c(-1,1,1,-1),2,2,dimnames=list(0:1,0:1))
x<-sim.Mk(tree,Q)
X<-to.matrix(x,levels(x))
X_missing<-X
X_missing[ii<-sample(1:nrow(X),10),]<-c(0.5,0.5)
fit<-fitMk(tree,X)
fit_missing<-fitMk(tree,X_missing)
q[i]<-fit$rates
q_missing[i]<-fit_missing$rates
cat(paste("Average q (non-missing) so far...",mean(q),"\n"))
cat(paste("Average q (missing) so far...",mean(q_missing),"\n"))
}
for(i in 1:2){
tree<-pbtree(n=100)
Q<-matrix(c(-1,1,1,-1),2,2,dimnames=list(0:1,0:1))
x<-sim.Mk(tree,Q)
X<-to.matrix(x,levels(x))
X_missing<-X
X_missing[ii<-sample(1:nrow(X),10),]<-c(0.5,0.5)
fit<-fitMk(tree,X)
fit_missing<-fitMk(tree,X_missing)
q[i]<-fit$rates
q_missing[i]<-fit_missing$rates
cat(paste("Loop ",i,":\n",sep=""))
cat(paste("Average q (non-missing) so far...",round(mean(q),3),"\n"))
cat(paste("Average q (missing) so far...",round(mean(q_missing),3),"\n\n"))
}
for(i in 1:100){
tree<-pbtree(n=100)
Q<-matrix(c(-1,1,1,-1),2,2,dimnames=list(0:1,0:1))
x<-sim.Mk(tree,Q)
X<-to.matrix(x,levels(x))
X_missing<-X
X_missing[ii<-sample(1:nrow(X),10),]<-c(0.5,0.5)
fit<-fitMk(tree,X)
fit_missing<-fitMk(tree,X_missing)
q[i]<-fit$rates
q_missing[i]<-fit_missing$rates
cat(paste("Loop ",i,":\n",sep=""))
cat(paste("Average q (non-missing) so far...",round(mean(q),3),"\n"))
cat(paste("Average q (missing) so far...",round(mean(q_missing),3),"\n\n"))
}
plot(q,q_missing)
for(i in 1:1000){
tree<-pbtree(n=100)
Q<-matrix(c(-1,1,1,-1),2,2,dimnames=list(0:1,0:1))
x<-sim.Mk(tree,Q)
X<-to.matrix(x,levels(x))
X_missing<-X
X_missing[ii<-sample(1:nrow(X),10),]<-c(0.5,0.5)
fit<-fitMk(tree,X)
fit_missing<-fitMk(tree,X_missing)
q[i]<-fit$rates
q_missing[i]<-fit_missing$rates
cat(paste("Loop ",i,":\n",sep=""))
cat(paste("Average q (non-missing) so far...",round(mean(q),3),"\n"))
cat(paste("Average q (missing) so far...",round(mean(q_missing),3),"\n\n"))
}
getwd()
setwd("courses/Biol634-spring2023/project/")
library(phytools)
getwd()
setwd("../courses/Biol634-spring2023/project/")
list.files()
setwd("doi_10.5061_dryad.4d5h8g12__v1/")
list.files()
squamate.tree<-read.tree(file="Species_level_supertree.tre")
squamate.data<-read.csv(file="Morphometrics.csv",row.names=1)
chk<-name.check(squamate.tree,squamate.data)
library(geiger)
chk<-name.check(squamate.tree,squamate.data)
chk
squamate.tree<-read.tree(file="Species_level_supertree.tre")
squamate.data<-read.csv(file="Morphometrics.csv",row.names=1)
chk<-name.check(squamate.tree,squamate.data)
squamate.tree<-drop.tip(squamate.tree,chk$tree_not_data)
squamate.tree
name.check(squamate.tree,squamate.data)
squamate.tree
head(squamate.data)
HDp1<-setNames(as.factor(squamate.data$HDp1-1),rownames(squamate.data))
head(HDp1)
hind_digits<-setNames(as.factor(squamate.data$HDp1-1),rownames(squamate.data))
hind_digits
toes_mk<-fitHRM(squamate.tree,hind_digits,umbral=TRUE,ncat=1,niter=10,
parallel=TRUE,ncores=10,pi="fitzjohn",ordered=TRUE,order=levels(hind_digits),
lik.func="pruning",logscale=TRUE)
toes_mk
plot(toes_mk)
plot(toes_mk,signif=4)
options(scipen=6)
plot(toes_mk,signif=4)
plot(as.Qmatrix(toes_mk))
plot(as.Qmatrix(toes_mk),show.zeros=FALSE,signif=4)
plot(as.Qmatrix(toes_mk),show.zeros=FALSE,signif=4,
width=TRUE,color=TRUE)
toes_hrm<-fitHRM(squamate.tree,hind_digits,umbral=TRUE,ncat=c(2,1,1,1,1,2),niter=10,
parallel=TRUE,ncores=10,pi="fitzjohn",ordered=TRUE,order=levels(hind_digits),
lik.func="pruning",logscale=TRUE)
plot(toes_hrm)
anova(toes_mk,toes_hrm)
save.image("C:/Users/liamj/Dropbox/courses/Biol634-spring2023/project/workspace.RData")
